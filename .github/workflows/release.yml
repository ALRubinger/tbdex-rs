name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of tbDEX to release and publish to TBD Artifactory and Maven Central. For example "1.0.0" or "1.3.7-beta-2". Required. Must not end in "-SNAPSHOT".'
        required: true

jobs:

  # Disable for now
  #run-ci:
  #  # This will run CI and also publish the Kotlin release to the TBD Artifactory repo manager
  #  name: Run CI
  #  #TODO Update this to TBD org when done testing
  #  uses: ALRubinger/tbdex-rs/.github/workflows/ci.yml@main
  #  secrets: inherit   

  git-tag:
    runs-on: ubuntu-latest
    #needs: run-ci
    outputs:
      RELEASE_TAG: ${{ steps.set-version-and-tag.outputs.RELEASE_TAG }}
      RELEASE_VERSION: ${{ steps.set-version-and-tag.outputs.RELEASE_VERSION }}

    name: Create Git Tag
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.TBD_RELEASE_GITHUB_PERSONAL_ACCESS_TOKEN }}

      # Used in writing commits in the release process
      - id: set-git-config
        name: Set Git Config
        run: |
          git config user.name "tbd-releases"
          git config user.email "releases@tbd.email"

      # Cache Maven repo
      - id: cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - id: set-version-and-tag
        name: Set version of Kotlin and commit
        run: |

          # cd into the Kotlin project
          cd bound/kt/

          # Get the required provided version
          version=${{ github.event.inputs.version }}
          # Precondition check; do not allow this to proceed if a version ending in "-SNAPSHOT" was specified
          if [[ $version =~ -SNAPSHOT$ ]]; then
            echo "Error: The version for release must not end with \"-SNAPSHOT\": $version"
            exit 1
          fi

          # Get the existing version from the POM and set it to the nextVersion, keeping the POM effectively versionless
          nextVersion=$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml) 
          if [[ -z $nextVersion ]]; then
            echo "Error: Could not find a version in the pom.xml"
            exit 1
          fi

          echo "Version to be released: $version"
          echo "Setting next development version back to original in pom.xml: $nextVersion"

          # Set newly resolved version in POM config
          mvn \
            versions:set \
            --batch-mode \
            -DnewVersion=$version

          # Commit
          git add -Av
          git commit -m "[TBD Release Manager ðŸš€] Setting version to: $version"
          tagName=v$version
          git tag -a $tagName -m "Tag version: $tagName" # We tag with a prefix of "v"
          git push origin main
          git push origin $tagName

          # Make the version and tag name available to subsequent jobs as an output param
          echo "RELEASE_TAG=$tagName" >> "$GITHUB_OUTPUT"
          echo "RELEASE_VERSION=$version" >> "$GITHUB_OUTPUT"
          cat $GITHUB_OUTPUT

          # Set the next development version and commit
          mvn \
            versions:set \
            --batch-mode \
            -DnewVersion=$nextVersion
          git add -Av
          git commit -m "[TBD Release Manager ðŸš€] Setting next development version after $version to: $nextVersion"
          git push origin main

  test-things:
    name: Test things
    needs: git-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ needs.git-tag.outputs.RELEASE_TAG }} # Check out the tag we created above
        

        